version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: scrumix-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-scrumix}
      POSTGRES_USER: ${POSTGRES_USER:-scrumix_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256  # More secure authentication
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C --auth-host=scram-sha-256"
      # Production optimizations
      POSTGRES_SHARED_PRELOAD_LIBRARIES: "pg_stat_statements"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d/
      - ./postgres/prod-postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./ssl:/var/lib/postgresql/ssl:ro  # SSL certificates
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - scrumix-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-scrumix_user} -d ${POSTGRES_DB:-scrumix}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s  # More time for production startup
    # Security and resource limits
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'


  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: scrumix-backend
    restart: unless-stopped
    environment:
      # Database
      POSTGRES_USER: ${POSTGRES_USER:-scrumix_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-scrumix}
      POSTGRES_SERVER: postgres
      POSTGRES_PORT: 5432
      
      # App Configuration
      SECRET_KEY: ${SECRET_KEY}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      
      # URLs
      BACKEND_URL: ${BACKEND_URL:-http://localhost:8000}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      
      # Keycloak OAuth
      KEYCLOAK_SERVER_URL: ${KEYCLOAK_SERVER_URL:-http://keycloak:8080}  # Internal URL
      KEYCLOAK_PUBLIC_URL: ${KEYCLOAK_PUBLIC_URL:-https://auth.yourdomain.com}  # Public URL
      KEYCLOAK_REALM: ${KEYCLOAK_REALM:-scrumix-app}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID:-scrumix-client}
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
      
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - scrumix-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: scrumix-frontend
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_BASE_URL: ${BACKEND_URL:-http://localhost:8000}/api/v1
      NODE_ENV: production
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - scrumix-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Keycloak for Authentication
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: scrumix-keycloak
    restart: unless-stopped
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD:-keycloak_password}
      KC_HOSTNAME: ${KEYCLOAK_HOSTNAME:-localhost}
      KC_HOSTNAME_PORT: ${KEYCLOAK_PORT:-8080}
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_LOG_LEVEL: info
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    ports:
      - "${KEYCLOAK_PORT:-8080}:8080"
    volumes:
      - keycloak_data:/opt/keycloak/data
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - scrumix-network
    command: start --optimized
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/8080;echo -e \"GET /health/ready HTTP/1.1\r\nhost: 127.0.0.1:8080\r\nConnection: close\r\n\r\n\" >&3;grep \"HTTP/1.1 200 OK\" <&3"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: scrumix-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - scrumix-network

networks:
  scrumix-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  keycloak_data:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local
