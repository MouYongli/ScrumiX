"""migrate_user_meeting_to_meeting_participant

Revision ID: b8b79a9ce086
Revises: 3d3942b18fb3
Create Date: 2025-08-21 17:47:59.672101

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'b8b79a9ce086'
down_revision: Union[str, Sequence[str], None] = '3d3942b18fb3'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # First, migrate existing data from user_meeting to meeting_participant if it exists
    connection = op.get_bind()
    
    # Check if user_meeting table exists and has data
    try:
        result = connection.execute(sa.text("SELECT COUNT(*) FROM user_meeting"))
        user_meeting_count = result.scalar()
        
        if user_meeting_count > 0:
            # Create temporary table to store existing data
            op.create_table('temp_user_meeting_data',
                sa.Column('id', sa.Integer()),
                sa.Column('user_id', sa.Integer()),
                sa.Column('meeting_id', sa.Integer()),
                sa.Column('role', sa.String()),
                sa.Column('created_at', sa.DateTime()),
                sa.Column('updated_at', sa.DateTime())
            )
            
            # Copy existing data
            connection.execute(sa.text("""
                INSERT INTO temp_user_meeting_data (id, user_id, meeting_id, role, created_at, updated_at)
                SELECT id, user_id, meeting_id, role, created_at, updated_at FROM user_meeting
            """))
    except:
        # Table doesn't exist or other error, continue with migration
        pass
    
    # Create the new meeting_participant table
    op.create_table('meeting_participant',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('meeting_id', sa.Integer(), nullable=False),
        sa.Column('role', sa.String(), nullable=False),  # Using String instead of Enum for SQLite compatibility
        sa.Column('external_name', sa.String(), nullable=True),
        sa.Column('external_email', sa.String(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
        sa.ForeignKeyConstraint(['meeting_id'], ['meetings.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_meeting_participant_id'), 'meeting_participant', ['id'], unique=False)
    
    # Migrate data from temp table if it exists
    try:
        result = connection.execute(sa.text("SELECT COUNT(*) FROM temp_user_meeting_data"))
        temp_count = result.scalar()
        
        if temp_count > 0:
            connection.execute(sa.text("""
                INSERT INTO meeting_participant (user_id, meeting_id, role, created_at, updated_at)
                SELECT user_id, meeting_id, role, created_at, updated_at FROM temp_user_meeting_data
            """))
            
            # Drop temp table
            op.drop_table('temp_user_meeting_data')
    except:
        pass
    
    # Drop the old user_meeting table
    try:
        op.drop_index('ix_user_meeting_id', table_name='user_meeting')
        op.drop_table('user_meeting')
    except:
        # Table might not exist
        pass


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('tasks', sa.Column('story_point', sa.INTEGER(), nullable=True))
    op.drop_constraint(None, 'tasks', type_='foreignkey')
    op.alter_column('tasks', 'backlog_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_constraint(None, 'meeting_action_item', type_='foreignkey')
    op.drop_index(op.f('ix_meeting_action_item_user_id'), table_name='meeting_action_item')
    op.alter_column('meeting_action_item', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('documentations', 'file_url',
               existing_type=sa.VARCHAR(length=1000),
               nullable=False)
    op.alter_column('documentations', 'type',
               existing_type=sa.Enum('SPRINT_REVIEW', 'SPRINT_RETROSPECTIVE', 'REQUIREMENT', 'DESIGN_ARCHITECTURE', 'MEETING_REPORT', 'USER_GUIDE', 'OTHER', name='documentationtype'),
               type_=sa.VARCHAR(length=12),
               existing_nullable=False)
    op.create_table('user_meeting',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('user_id', sa.INTEGER(), nullable=False),
    sa.Column('meeting_id', sa.INTEGER(), nullable=False),
    sa.Column('role', sa.VARCHAR(length=11), nullable=False),
    sa.Column('created_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['meeting_id'], ['meetings.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_user_meeting_id', 'user_meeting', ['id'], unique=False)
    op.drop_index(op.f('ix_meeting_participant_id'), table_name='meeting_participant')
    op.drop_table('meeting_participant')
    # ### end Alembic commands ###
