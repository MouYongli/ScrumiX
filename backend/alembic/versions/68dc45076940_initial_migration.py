"""Initial migration

Revision ID: 68dc45076940
Revises: 
Create Date: 2025-08-10 18:16:59.992536

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '68dc45076940'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('projects',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('PLANNING', 'ACTIVE', 'COMPLETED', 'CANCELLED', 'ON_HOLD', name='projectstatus'), nullable=False),
    sa.Column('start_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('end_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('color', sa.String(length=20), nullable=True, comment='Project color'),
    sa.Column('last_activity_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_projects_id'), 'projects', ['id'], unique=False)
    op.create_index(op.f('ix_projects_name'), 'projects', ['name'], unique=False)
    op.create_index(op.f('ix_projects_status'), 'projects', ['status'], unique=False)
    op.create_table('tags',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('title', sa.String(length=100), nullable=False, comment='Tag title'),
    sa.Column('description', sa.String(length=255), nullable=True, comment='Tag description'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tags_id'), 'tags', ['id'], unique=False)
    op.create_index(op.f('ix_tags_title'), 'tags', ['title'], unique=False)
    op.create_table('documentations',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('title', sa.String(length=500), nullable=False),
    sa.Column('type', sa.Enum('USER_GUIDE', 'API_DOC', 'DESIGN_DOC', 'REQUIREMENT', 'ARCHITECTURE', 'OTHER', name='documentationtype'), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('file_url', sa.String(length=1000), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_documentations_id'), 'documentations', ['id'], unique=False)
    op.create_index(op.f('ix_documentations_project_id'), 'documentations', ['project_id'], unique=False)
    op.create_index(op.f('ix_documentations_title'), 'documentations', ['title'], unique=False)
    op.create_table('sprints',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('sprint_name', sa.String(length=100), nullable=False),
    sa.Column('sprint_goal', sa.Text(), nullable=True),
    sa.Column('start_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('end_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('status', sa.Enum('PLANNING', 'ACTIVE', 'COMPLETED', 'CANCELLED', name='sprintstatus'), nullable=False),
    sa.Column('sprint_capacity', sa.Integer(), nullable=True),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sprints_id'), 'sprints', ['id'], unique=False)
    op.create_index(op.f('ix_sprints_project_id'), 'sprints', ['project_id'], unique=False)
    op.create_index(op.f('ix_sprints_sprint_name'), 'sprints', ['sprint_name'], unique=False)
    op.create_table('backlogs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('TODO', 'IN_PROGRESS', 'IN_REVIEW', 'DONE', 'CANCELLED', name='backlogstatus'), nullable=False),
    sa.Column('story_point', sa.Integer(), nullable=True),
    sa.Column('priority', sa.Enum('CRITICAL', 'HIGH', 'MEDIUM', 'LOW', name='backlogpriority'), nullable=False),
    sa.Column('label', sa.String(length=100), nullable=True),
    sa.Column('item_type', sa.Enum('EPIC', 'STORY', 'TASK', 'BUG', 'FEATURE', 'IMPROVEMENT', name='backlogtype'), nullable=False),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('root_id', sa.Integer(), nullable=True),
    sa.Column('level', sa.Integer(), nullable=False),
    sa.Column('path', sa.String(length=500), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('created_by_id', sa.Integer(), nullable=True),
    sa.Column('assigned_to_id', sa.Integer(), nullable=True),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.Column('sprint_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['assigned_to_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['parent_id'], ['backlogs.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.ForeignKeyConstraint(['root_id'], ['backlogs.id'], ),
    sa.ForeignKeyConstraint(['sprint_id'], ['sprints.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_backlog_assignee_status', 'backlogs', ['assigned_to_id', 'status'], unique=False)
    # Create a GIN index on the tsvector of title and description
    op.execute("""
        CREATE INDEX idx_backlog_fts ON backlogs 
        USING gin(to_tsvector('english', COALESCE(title, '') || ' ' || COALESCE(description, '')))
    """)
    op.create_index('idx_backlog_priority_status', 'backlogs', ['priority', 'status'], unique=False)
    op.create_index('idx_backlog_project_priority', 'backlogs', ['project_id', 'priority'], unique=False)
    op.create_index('idx_backlog_project_status', 'backlogs', ['project_id', 'status'], unique=False)
    op.create_index('idx_backlog_root_level', 'backlogs', ['root_id', 'level'], unique=False)
    op.create_index('idx_backlog_sprint_priority', 'backlogs', ['sprint_id', 'priority'], unique=False)
    op.create_index('idx_backlog_sprint_status', 'backlogs', ['sprint_id', 'status'], unique=False)
    op.create_index('idx_backlog_story_points', 'backlogs', ['story_point'], unique=False)
    op.create_index('idx_backlog_type_status', 'backlogs', ['item_type', 'status'], unique=False)
    op.create_index(op.f('ix_backlogs_assigned_to_id'), 'backlogs', ['assigned_to_id'], unique=False)
    op.create_index(op.f('ix_backlogs_created_at'), 'backlogs', ['created_at'], unique=False)
    op.create_index(op.f('ix_backlogs_created_by_id'), 'backlogs', ['created_by_id'], unique=False)
    op.create_index(op.f('ix_backlogs_id'), 'backlogs', ['id'], unique=False)
    op.create_index(op.f('ix_backlogs_item_type'), 'backlogs', ['item_type'], unique=False)
    op.create_index(op.f('ix_backlogs_label'), 'backlogs', ['label'], unique=False)
    op.create_index(op.f('ix_backlogs_level'), 'backlogs', ['level'], unique=False)
    op.create_index(op.f('ix_backlogs_parent_id'), 'backlogs', ['parent_id'], unique=False)
    op.create_index(op.f('ix_backlogs_path'), 'backlogs', ['path'], unique=False)
    op.create_index(op.f('ix_backlogs_priority'), 'backlogs', ['priority'], unique=False)
    op.create_index(op.f('ix_backlogs_project_id'), 'backlogs', ['project_id'], unique=False)
    op.create_index(op.f('ix_backlogs_root_id'), 'backlogs', ['root_id'], unique=False)
    op.create_index(op.f('ix_backlogs_sprint_id'), 'backlogs', ['sprint_id'], unique=False)
    op.create_index(op.f('ix_backlogs_status'), 'backlogs', ['status'], unique=False)
    op.create_index(op.f('ix_backlogs_story_point'), 'backlogs', ['story_point'], unique=False)
    op.create_index(op.f('ix_backlogs_title'), 'backlogs', ['title'], unique=False)
    op.create_table('meetings',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('meeting_type', sa.Enum('TEAM_MEETING', 'SPRINT_PLANNING', 'SPRINT_REVIEW', 'SPRINT_RETROSPECTIVE', 'DAILY_STANDUP', 'OTHER', name='meetingtype'), nullable=False),
    sa.Column('start_datetime', sa.DateTime(timezone=True), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('duration', sa.Integer(), nullable=False),
    sa.Column('location', sa.String(length=500), nullable=True),
    sa.Column('sprint_id', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.ForeignKeyConstraint(['sprint_id'], ['sprints.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_meetings_id'), 'meetings', ['id'], unique=False)
    op.create_index(op.f('ix_meetings_meeting_type'), 'meetings', ['meeting_type'], unique=False)
    op.create_index(op.f('ix_meetings_project_id'), 'meetings', ['project_id'], unique=False)
    op.create_index(op.f('ix_meetings_sprint_id'), 'meetings', ['sprint_id'], unique=False)
    op.create_index(op.f('ix_meetings_title'), 'meetings', ['title'], unique=False)
    op.create_table('tasks',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('TODO', 'IN_PROGRESS', 'DONE', 'CANCELLED', name='taskstatus'), nullable=False),
    sa.Column('priority', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='taskpriority'), nullable=False),
    sa.Column('story_point', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('sprint_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['sprint_id'], ['sprints.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tasks_id'), 'tasks', ['id'], unique=False)
    op.create_index(op.f('ix_tasks_priority'), 'tasks', ['priority'], unique=False)
    op.create_index(op.f('ix_tasks_sprint_id'), 'tasks', ['sprint_id'], unique=False)
    op.create_index(op.f('ix_tasks_status'), 'tasks', ['status'], unique=False)
    op.create_index(op.f('ix_tasks_title'), 'tasks', ['title'], unique=False)
    op.create_table('acceptance_criteria',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('backlog_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=500), nullable=False, comment='Acceptance criteria description'),
    sa.Column('description', sa.Text(), nullable=True, comment='Detailed description of acceptance criteria'),
    sa.Column('is_met', sa.Boolean(), nullable=False, comment='Whether the criteria is met'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['backlog_id'], ['backlogs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_acceptance_criteria_backlog_id'), 'acceptance_criteria', ['backlog_id'], unique=False)
    op.create_index(op.f('ix_acceptance_criteria_id'), 'acceptance_criteria', ['id'], unique=False)
    op.create_table('meeting_action_item',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('meeting_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=500), nullable=False, comment='Action item title/description'),
    sa.Column('due_date', sa.DateTime(timezone=True), nullable=True, comment='Due date for the action item'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['meeting_id'], ['meetings.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_meeting_action_item_id'), 'meeting_action_item', ['id'], unique=False)
    op.create_index(op.f('ix_meeting_action_item_meeting_id'), 'meeting_action_item', ['meeting_id'], unique=False)
    op.create_table('meeting_agenda',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('meeting_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=500), nullable=False, comment='Agenda item title/description'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['meeting_id'], ['meetings.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_meeting_agenda_id'), 'meeting_agenda', ['id'], unique=False)
    op.create_index(op.f('ix_meeting_agenda_meeting_id'), 'meeting_agenda', ['meeting_id'], unique=False)
    op.create_table('meeting_note',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('meeting_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False, comment='Note content'),
    sa.Column('parent_note_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['meeting_id'], ['meetings.id'], ),
    sa.ForeignKeyConstraint(['parent_note_id'], ['meeting_note.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_meeting_note_id'), 'meeting_note', ['id'], unique=False)
    op.create_index(op.f('ix_meeting_note_meeting_id'), 'meeting_note', ['meeting_id'], unique=False)
    op.create_index(op.f('ix_meeting_note_parent_note_id'), 'meeting_note', ['parent_note_id'], unique=False)
    op.create_index(op.f('ix_meeting_note_user_id'), 'meeting_note', ['user_id'], unique=False)
    # Add columns as nullable first
    op.add_column('user_oauth', sa.Column('username', sa.String(length=255), nullable=True))
    op.add_column('user_oauth', sa.Column('email', sa.String(length=255), nullable=True))
    op.add_column('user_oauth', sa.Column('password', sa.String(length=255), nullable=True))
    op.add_column('user_oauth', sa.Column('avatar_url', sa.String(length=500), nullable=True))
    
    # Set default values for existing rows
    op.execute("UPDATE user_oauth SET username = 'default', email = 'default@example.com', password = 'changeme'")
    
    # Now make columns NOT NULL
    op.alter_column('user_oauth', 'username', nullable=False)
    op.alter_column('user_oauth', 'email', nullable=False)
    op.alter_column('user_oauth', 'password', nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('user_oauth', 'avatar_url')
    op.drop_column('user_oauth', 'password')
    op.drop_column('user_oauth', 'email')
    op.drop_column('user_oauth', 'username')
    op.drop_index(op.f('ix_meeting_note_user_id'), table_name='meeting_note')
    op.drop_index(op.f('ix_meeting_note_parent_note_id'), table_name='meeting_note')
    op.drop_index(op.f('ix_meeting_note_meeting_id'), table_name='meeting_note')
    op.drop_index(op.f('ix_meeting_note_id'), table_name='meeting_note')
    op.drop_table('meeting_note')
    op.drop_index(op.f('ix_meeting_agenda_meeting_id'), table_name='meeting_agenda')
    op.drop_index(op.f('ix_meeting_agenda_id'), table_name='meeting_agenda')
    op.drop_table('meeting_agenda')
    op.drop_index(op.f('ix_meeting_action_item_meeting_id'), table_name='meeting_action_item')
    op.drop_index(op.f('ix_meeting_action_item_id'), table_name='meeting_action_item')
    op.drop_table('meeting_action_item')
    op.drop_index(op.f('ix_acceptance_criteria_id'), table_name='acceptance_criteria')
    op.drop_index(op.f('ix_acceptance_criteria_backlog_id'), table_name='acceptance_criteria')
    op.drop_table('acceptance_criteria')
    op.drop_index(op.f('ix_tasks_title'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_status'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_sprint_id'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_priority'), table_name='tasks')
    op.drop_index(op.f('ix_tasks_id'), table_name='tasks')
    op.drop_table('tasks')
    op.drop_index(op.f('ix_meetings_title'), table_name='meetings')
    op.drop_index(op.f('ix_meetings_sprint_id'), table_name='meetings')
    op.drop_index(op.f('ix_meetings_project_id'), table_name='meetings')
    op.drop_index(op.f('ix_meetings_meeting_type'), table_name='meetings')
    op.drop_index(op.f('ix_meetings_id'), table_name='meetings')
    op.drop_table('meetings')
    op.drop_index(op.f('ix_backlogs_title'), table_name='backlogs')
    op.drop_index(op.f('ix_backlogs_story_point'), table_name='backlogs')
    op.drop_index(op.f('ix_backlogs_status'), table_name='backlogs')
    op.drop_index(op.f('ix_backlogs_sprint_id'), table_name='backlogs')
    op.drop_index(op.f('ix_backlogs_root_id'), table_name='backlogs')
    op.drop_index(op.f('ix_backlogs_project_id'), table_name='backlogs')
    op.drop_index(op.f('ix_backlogs_priority'), table_name='backlogs')
    op.drop_index(op.f('ix_backlogs_path'), table_name='backlogs')
    op.drop_index(op.f('ix_backlogs_parent_id'), table_name='backlogs')
    op.drop_index(op.f('ix_backlogs_level'), table_name='backlogs')
    op.drop_index(op.f('ix_backlogs_label'), table_name='backlogs')
    op.drop_index(op.f('ix_backlogs_item_type'), table_name='backlogs')
    op.drop_index(op.f('ix_backlogs_id'), table_name='backlogs')
    op.drop_index(op.f('ix_backlogs_created_by_id'), table_name='backlogs')
    op.drop_index(op.f('ix_backlogs_created_at'), table_name='backlogs')
    op.drop_index(op.f('ix_backlogs_assigned_to_id'), table_name='backlogs')
    op.drop_index('idx_backlog_type_status', table_name='backlogs')
    op.drop_index('idx_backlog_story_points', table_name='backlogs')
    op.drop_index('idx_backlog_sprint_status', table_name='backlogs')
    op.drop_index('idx_backlog_sprint_priority', table_name='backlogs')
    op.drop_index('idx_backlog_root_level', table_name='backlogs')
    op.drop_index('idx_backlog_project_status', table_name='backlogs')
    op.drop_index('idx_backlog_project_priority', table_name='backlogs')
    op.drop_index('idx_backlog_priority_status', table_name='backlogs')
    op.execute("DROP INDEX IF EXISTS idx_backlog_fts")
    op.drop_index('idx_backlog_assignee_status', table_name='backlogs')
    op.drop_table('backlogs')
    op.drop_index(op.f('ix_sprints_sprint_name'), table_name='sprints')
    op.drop_index(op.f('ix_sprints_project_id'), table_name='sprints')
    op.drop_index(op.f('ix_sprints_id'), table_name='sprints')
    op.drop_table('sprints')
    op.drop_index(op.f('ix_documentations_title'), table_name='documentations')
    op.drop_index(op.f('ix_documentations_project_id'), table_name='documentations')
    op.drop_index(op.f('ix_documentations_id'), table_name='documentations')
    op.drop_table('documentations')
    op.drop_index(op.f('ix_tags_title'), table_name='tags')
    op.drop_index(op.f('ix_tags_id'), table_name='tags')
    op.drop_table('tags')
    op.drop_index(op.f('ix_projects_status'), table_name='projects')
    op.drop_index(op.f('ix_projects_name'), table_name='projects')
    op.drop_index(op.f('ix_projects_id'), table_name='projects')
    op.drop_table('projects')
    # ### end Alembic commands ###
